<!DOCTYPE HTML>
<html>
    <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <script src="https://cdn-webgl.wrld3d.com/wrldjs/dist/latest/wrld.js"></script>
          <link href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.1/leaflet.css" rel="stylesheet" />
          <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    </head>
 <head>
     
    <script>
        function getNoiseLevel() {
            let d = new Date(); // for now
            let utilizationArray = [1, 1, 1, 1, 1, 1,
                                    1.1, 1.2, 1.4, 1.5, 1.7, 1.7,
                                    1.4, 1.5, 1.5, 1.5, 1.5, 1.35,
                                    1.15, 1.1, 1, 1, 1, 1];
            let curHour = d.getHours();
            if (curHour == 0)
                curHour = 23;
            else
                --curHour;
            
            let ambientNoiseDB = 40;
            let curUtilization = utilizationArray[curHour];
            
            let utilizationVariance = Math.random() / 5;
            
            let plusOrMinus = Math.random();
            
            let finalUtilization;
            if (plusOrMinus > 0.5)
                finalUtilization = curUtilization + utilizationVariance;
            else
                finalUtilization = curUtilization - utilizationVariance;
            
            let labNoiseDB = ambientNoiseDB * finalUtilization;
            
            if (curUtilization != 1)
                return labNoiseDB;
            else
                return ambientNoiseDB;
        }
    </script>

   <script src="https://cdn-webgl.wrld3d.com/wrldjs/dist/latest/wrld.js"></script>
   <link href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.1/leaflet.css" rel="stylesheet" />
 </head>

 <body>
 <div style="position: relative">
    <div id="floorButtons">
        <button onclick="toFloor()">Go to floor</button>
        <button onclick="setEntityHighlights()">Highlight entities</button>
        <div id="currentDB"></div>
    </div>
   <div id="map" style="height: 400px"></div>
   <script>
    let intervalVar;
    let noiseHighlighted = false;
    var map = L.Wrld.map("map", "03013be32ed00b5339b756582b8d184a", {
        center: [56.45844771563734, -2.982573509216309],
        zoom: 18,
        indoorsEnabled: true,
        coverageTreeManifest: "https://webgl-cdn1.wrld3d.com/chunk/indoor_maps/api_requests/EIM-7e76aeae-2f60-471d-baac-cf0d75dc91cf_2018_09_21_10_34_42/webgl_manifest.bin.gz"
    });

    function toFloor() {
        map.indoors.enter("QMB");
    }

	function highlightUpdate(labid) {
        let roomDB = getNoiseLevel();
        let highestDB = 75;
        let baseDB = 40;

        let dbDiff = highestDB - roomDB;
        dbDiff = dbDiff / (highestDB - baseDB);

        let redRGB = Math.floor(255 * (1 - dbDiff));
        let blueRGB = Math.floor(255 * dbDiff);

        if (redRGB > 255)
            redRGB = 255;
        if (redRGB < 0)
            redRGB = 0;

        if (blueRGB > 255)
            blueRGB = 255;
        if (blueRGB < 0)
            blueRGB = 0;
        
        map.indoors.setEntityHighlights(labid, [redRGB, 0, blueRGB, 64]);
        
        // document.getElementById("currentDB").innerHTML = parseFloat(roomDB).toPrecision(3);
        
                let newChartDataObject = {
                    data:[{
                        x: "04/01/2018", y: roomDB
                    },
                    ],
                   };
                massPopChart.config.data.datasets[0].data.push({x: +new Date, y: roomDB});
                massPopChart.config.data.datasets[0].borderColor = ("rgba(" + parseFloat(redRGB).toPrecision(3) + " , 0," + parseFloat(blueRGB).toPrecision(3) + " , 64)");
                massPopChart.update();
                
        console.log(massPopChart.config.data.datasets[0]);
    }

    function highlightLabs()
    {
        highlightUpdate("3003");
        highlightUpdate("3002");
        highlightUpdate("3001");
        highlightUpdate("3000");
    }

    function setEntityHighlights() {
        if ( noiseHighlighted == false )
        {
            noiseHighlighted = true;
            highlightLabs();
            intervalVar = setInterval(highlightLabs, 3000);
        }
        else
        {
            noiseHighlighted = false;
            clearEntityHighlights();
        }
    }
    function onIndoorMapEntered() {
        //map.indoors.setFloor(2);
        //map.setView([56.459984, -2.978238], 19.2);
    }

    function clearEntityHighlights() {
        map.indoors.clearEntityHighlights();
        if(intervalVar)
            clearInterval(intervalVar);
    }
    //map.indoors.on("indoormapenter", onIndoorMapEntered);
   </script>

 </div>
 <div class="container">
        <canvas id="myChart"></canvas>
      </div>
    
      <script>
        var timeFormat = 'DD/MM/YYYY';
        let myChart = document.getElementById('myChart').getContext('2d');
    
        let massPopChart = new Chart(myChart, {
          type:'line', // bar, horizontalBar, pie, line, doughnut, radar, polarArea
          data:{
            datasets:[{
                    label:'Ronberter Level',
                    data:[],
                    fill: false,
                    borderColor: 'red',
                    }
                    ]
          },
          options: {
            responsive: true,
            title:      {
                display: true,
                text:    "Chart.js Time Scale"
            },
            scales:     {
                xAxes: [{
                    type:       "time",
                    time:       {
                        format: timeFormat,
                        tooltipFormat: 'll'
                    },
                    scaleLabel: {
                        display:     true,
                        labelString: 'Date'
                    }
                }],
                yAxes: [{
                    scaleLabel: {
                        display:     true,
                        labelString: 'value'
                    },
                        ticks: {
                            min: 40,
                            max: 80
                        }
                }]
            }
        }
        });
      </script>
 </body>
</html>